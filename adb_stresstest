#!/bin/bash
#nice intro
ver="1.3"
echo
echo "Android APP stress test "$ver
echo "---------------------------"

#get app package name
app=$(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)

#check if display is on with suitable app
if ! ([[ $app == *"com"* ]] || [[ $app == *"cz"* ]]) ; then
   echo "No suitable app in foreground!";
   echo "Unlock your phone and open APP you want to test.";
   echo "Aborting...";
   echo
   exit
fi

#check/set number of input events
if [ -z "$1" ] || (( $1<1 )); then
   echo "Invalid number of input events in argument!";
   echo 'Use "adb_stresstest x" where x>0.';
   echo "Aborting...";
   echo
   exit
else
   echo "Input events incoming: "$1;
   events=$1
fi

#set seed
if ! [ -z "$2" ]; then
   echo "Seed set to: "$2;
   seed=$2
else
   seed=$RANDOM
   echo "Seed not specified!"
   echo 'Use "adb_stresstest x y" where y>0 to set seed.' 
   echo "Setting random seed: "$RANDOM;
fi

#checks passed
echo "Running stress test on: "$app
logname="$app-`date +%Y-%m-%d-%H-%M-%S`.log"

#create log
echo "Android APP stress test "$ver >> ~/Desktop/$logname
echo "Test with seed "$seed "and "$events" input events started at: `date +%Y-%m-%d-%H-%M-%S`" >> ~/Desktop/$logname
echo "---------------------------" >> ~/Desktop/$logname


#lock screen
task_id=$(adb shell dumpsys activity | grep mFocusedActivity | rev) #get focused activity info and reverse it
set $task_id #breaks task_id into $1 $2 ...
task_id=$1 #saves $1 into task_id
task_id=$(echo $task_id | rev) # reverse string back
task_id=${task_id//[!0-9]/} #strip non numeric chars from task_id
adb shell am task lock $task_id; #lock current app to prevent monkey escape
adb shell input tap 865 1620 #ugly hardcoded tap for my screen size, substitute them by (x,y) of your confirm button
echo "App locked to screen."
echo "Testing..."

#run test
adb shell monkey -p $app -s $seed --pct-syskeys 0 --pct-anyevent 0 --monitor-native-crashes $events >> ~/Desktop/$logname

#unlock screen
adb shell am task lock stop
echo "App unlocked from screen."
echo "---------------------------"

#check test result
if grep -q "CRASH" ~/Desktop/$logname ; then

   echo "
     _.-^^---....,,--       
 _--                  --_  
<                        >)
|                         | 
 \._                   _./  
     ----. . , ; .----        
          | |   |             
       .-=||  | |=-.   
       --=#%%&%%#=-    
          | ;  :|     
     _.,-#%&%@%#&#~,._ 

"
   echo "App was destroyed by monkey and crashed!"
   echo "---------------------------" >> ~/Desktop/$logname
   echo "App was destroyed by monkey and crashed!" >> ~/Desktop/$logname
   mv ~/Desktop/$logname ~/Desktop/CRASH-$logname
   echo "Log saved to desktop: CRASH-"$logname

elif grep -q "RESPONDING" ~/Desktop/$logname ; then
   echo "App was destroyed by monkey and stopped responding!"
   echo "---------------------------" >> ~/Desktop/$logname
   echo "App was destroyed by monkey and stopped responding!" >> ~/Desktop/$logname
   mv ~/Desktop/$logname ~/Desktop/FREEZE-$logname
   echo "Log saved to desktop: FREEZE-"$logname

elif grep -q "Events" ~/Desktop/$logname ; then
   echo "App survived monkey madness! Deleting log."
   echo "---------------------------" >> ~/Desktop/$logname
   echo "App survived monkey madness!" >> ~/Desktop/$logname
   rm ~/Desktop/$logname

else
   echo "Monkey was killed in action!"
   echo "---------------------------" >> ~/Desktop/$logname
   echo "Monkey was killed in action!" >> ~/Desktop/$logname
   mv ~/Desktop/$logname ~/Desktop/KILLED-$logname
   echo "Log saved to desktop: KILLED-"$logname
fi



