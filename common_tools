#!/bin/bash

##########################
### ANDROID SECTION

android_choose_device() {
#Populate array with device ids
DEVICES=()
for LINE in `adb devices | grep -v "List"  | awk '{print $1}'`
do
  DEVICE=`echo $LINE | awk '{print $1}'`
  DEVICES+=("$DEVICE")
done

#No device connected
if [ ${#DEVICES[@]} -eq 0 ]
then
   echo "‚ùå No device connected, aborting..."
   exit
fi

#Gather device info and choose device
if [ ${#DEVICES[@]} -gt 1 ]
then
   NUMBER=1
   echo "üì± Available devices:"
   for ID in "${DEVICES[@]}"
    do
      MANUFACTURER=$(adb -s $ID shell getprop ro.product.manufacturer | tr -cd '[[:alnum:]]._-')
      MODEL=$(adb -s $ID shell getprop ro.product.model | tr -cd '[[:alnum:]]._-')
      VERSION=$(adb -s $ID shell getprop ro.build.version.release | tr -cd '[[:alnum:]]._-')
      SDK=$(adb -s $ID shell getprop ro.build.version.sdk | tr -cd '[[:alnum:]]._-')
      INFO=$(printf "%s)\n%s\n%s\n%s\n(API %s)\n-\n%s" "$NUMBER" "$MANUFACTURER" "$MODEL" "$VERSION" "$SDK" "$ID")
      echo $INFO
      ((NUMBER++))
    done

    read -p "üìù Select a device: " CHOICE
    while :;
    do
    if ((CHOICE <= 0 || CHOICE > ${#DEVICES[@]})); then
      echo -en "\033[1A\033[2K" #deletes last echoed line in terminal
      read -p "Invalid input, try again: " CHOICE
    else
      break
    fi
    done
    SELECTED_DEVICE=${DEVICES[(($CHOICE-1))]}
else
   SELECTED_DEVICE="${DEVICES[0]}"
fi

SELECTED_DEVICE_MODEL=$(adb -s $SELECTED_DEVICE shell getprop ro.product.model | tr -cd '[[:alnum:]]._-')
SELECTED_DEVICE_SDK=$(adb -s $SELECTED_DEVICE shell getprop ro.build.version.sdk | tr -cd '[[:alnum:]]._-')
}

android_is_installed() {
adb -s $SELECTED_DEVICE shell pm list packages -f | sed -e 's/.*=//' | grep $1 &> /dev/null
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
    echo "ü§∑‚Äç Package $1 is not installed."
    exit
fi
}

##########################
### IOS SECTION

ios_check_developer_image(){
  IS_MOUNTED=$(ideviceimagemounter -u $1 -l)
  if [ ${#IS_MOUNTED} -eq 0 ] ; then
    read -r -p "‚ùå Developer image probably not mounted, do you want to launch Xcode? [y/n] " RESPONSE
    case "$RESPONSE" in
        [yY])
            ;;
        *)
            exit
            ;;
    esac
    open -a Xcode
    sleep 8
  fi
}

ios_choose_device(){
  IOS_DEVICES=( $(idevice_id -l) )

  #No device connected
  if [ ${#IOS_DEVICES[@]} -eq 0 ]
  then
     echo "‚ùå No device connected, aborting..."
     exit
  fi

  if [ ${#IOS_DEVICES[@]} -gt 1 ]
  then
     NUMBER=1
     echo "üì± Available devices:"
     for ID in "${IOS_DEVICES[@]}"
      do
        ios_check_developer_image $ID
        MANUFACTURER="Apple"
        MODEL=$(ios_translate_name $(ideviceinfo -u $ID | grep "HardwareModel" | cut -d\   -f2))
        VERSION=$(ideviceinfo -u $ID | grep "ProductVersion" | cut -d\   -f2)
        INFO=$(printf "%s)\n%s\n%s\n%s\n-\n%s" "$NUMBER" "$MANUFACTURER" "$MODEL" "$VERSION" "$ID")
        echo $INFO
        ((NUMBER++))
      done

      read -p "üìù Select a device: " CHOICE
      while :;
      do
      if ((CHOICE <= 0 || CHOICE > ${#IOS_DEVICES[@]})); then
        echo -en "\033[1A\033[2K" #deletes last echoed line in terminal
        read -p "ü§∑ Invalid input, try again: " CHOICE
      else
        break
      fi
      done
      SELECTED_DEVICE=${IOS_DEVICES[(($CHOICE-1))]}
  else
     SELECTED_DEVICE="${IOS_DEVICES[0]}"
  fi

  SELECTED_DEVICE_MODEL=$(ios_translate_name $(ideviceinfo -u $SELECTED_DEVICE | grep "HardwareModel" | cut -d\   -f2))
  SELECTED_DEVICE_VERSION=$(ideviceinfo -u $SELECTED_DEVICE | grep "ProductVersion" | cut -d\   -f2)
}

ios_translate_name(){
  NAME=$1
  case $NAME in
    "Purple"*|"purple"*)
      NAME="iPhone"
      ;;
    "M68"*)
      NAME="iPhone"
      ;;
    "N90"*|"N92"*)
      NAME="iPhone4"
      ;;
    "N94"*)
      NAME="iPhone4S"
      ;;
    "N88"*)
      NAME="iPhone3GS"
      ;;
    "N82"*)
      NAME="iPhone3G"
      ;;
    "N71"*)
      NAME="iPhone6S"
      ;;
    "N66"*)
      NAME="iPhone6SPlus"
      ;;
    "N61"*)
      NAME="iPhone6"
      ;;
    "N56"*)
      NAME="iPhone6Plus"
      ;;
    "N51"*|"N53"*)
      NAME="iPhone5S"
      ;;
    "N48"*)
      NAME="iPhone5C"
      ;;
    "N41"*|"N42"*)
      NAME="iPhone5"
      ;;
    "D10"*)
      NAME="iPhone7"
      ;;
    "D11"*)
      NAME="iPhone7Plus"
      ;;
    "D20"*)
      NAME="iPhone8"
      ;;
    "D21"*)
      NAME="iPhone8Plus"
      ;;
    "D22"*|"Ferrari"*|"ferrari"*)
      NAME="iPhoneX"
      ;;
    "D32"*)
      NAME="iPhoneXS"
      ;;
    "D33"*)
      NAME="iPhoneXSMax"
      ;;
    "N84"*)
      NAME="iPhoneXR"
      ;;
    "J1"*)
      NAME="iPad3gen"
      ;;
    "J2"*)
      NAME="iPad3gen"
      ;;
    "J72"*)
      NAME="iPadAir"
      ;;
    "J82"*)
      NAME="iPadAir2"
      ;;
    "J85"*)
      NAME="iPadMiniRetina"
      ;;
    "J96"*)
      NAME="iPadMini4"
      ;;
    "J98"*|"J99"*)
      NAME="iPadPro"
      ;;
    "K48"*)
      NAME="iPad"
      ;;
    "K93"*|"K94"*|"K95"*)
      NAME="iPad2"
      ;;
    "P101"*|"P103"*)
      NAME="iPad4gen"
      ;;
    "P105"*|"P107"*)
      NAME="iPadMini"
      ;;
  esac
  echo $NAME
}

ios_get_package_list(){
  echo "üîç Detecting packages..."
  PACKAGE_LIST=()
  ALL_INFO_LIST=($(ideviceinstaller -u $SELECTED_DEVICE -l -o list_user | tail -n +2 | sed -e 's/.*=//' | sort))

  for PACKAGE in "${ALL_INFO_LIST[@]}" #remove redundant information
    do
      echo "$PACKAGE" | grep -q '"'
      EXIT_CODE=$?

      if [ $EXIT_CODE -ne 0 ]; then
        PACKAGE=${PACKAGE%,*}
        PACKAGE_LIST+=($PACKAGE)
      fi
    done

  if [ ${#PACKAGE_LIST[@]} -eq 0 ]; then
    echo "ü§∑‚Äç No packages installed."
    exit
  fi
}

#####
### COMMON SECTION

should_proceed(){
read -r -p "$1 [y/n] " RESPONSE
case "$RESPONSE" in
    [yY])
        ;;
    *)
        exit
        ;;
esac
}

check_web_url(){
  WEB_URL=$1

  if [[ $WEB_URL == "" ]]; then
    read -p "üìù Insert web url: " WEB_URL
    check_web_url $WEB_URL
  else
    case $1 in
      'http://'*)
        ;;
      'https://'*)
        ;;
      *'://'*)
        ;;
      *)
        WEB_URL='http://'$WEB_URL
        ;;
    esac
  fi
}

choose_number_max(){
  read -p "üìù Choose one: " CHOICE
  while :;
  do
    if [[ -z $CHOICE  || $CHOICE -le 0 || $CHOICE -gt $1 ]]; then
      echo -en "\033[1A\033[2K" #deletes last echoed line in terminal
      read -p "ü§∑‚Äç Invalid input, try again: " CHOICE
    else
      break
    fi
  done
  CHOICE=$((CHOICE-1))
}
