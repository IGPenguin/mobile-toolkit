#!/bin/bash
TOOLKIT_LOCATION=$(dirname "$0")
LAST_CHECK_DATE_FILE="$TOOLKIT_LOCATION/toolkit_last_check_date.txt"

##########################
### ANDROID SECTION

android_check_connected(){
  android_get_devices
  #No device connected
  if [ ${#DEVICES[@]} -eq 0 ]
  then
    echo "‚ùå No Android devices detected."
    yes_or_no "‚ùì Use emulator?"; if [[ "$RESPONSE" == "y" ||  "$RESPONSE" == "Y" ]]; then $TOOLKIT_LOCATION/aemulator; fi
    android_wait_for_device
  fi
}

android_wait_for_device(){
  echo "‚è≥ Waiting for Android device..."
  adb wait-for-any-device
  android_get_devices
}

android_get_devices(){
  #Populate array with device ids
  DEVICES=()
  for LINE in `adb devices | grep -v "List"  | awk '{print $1}'`
  do
    DEVICE=`echo $LINE | awk '{print $1}'`
    DEVICES+=("$DEVICE")
  done
}

android_choose_device() {
  check_for_update
  android_check_connected

  #Gather device info and choose device
  if [ ${#DEVICES[@]} -gt 1 ]
  then
    NUMBER=1
    echo "üì± Available devices:"
    for ID in "${DEVICES[@]}"
    do
      MANUFACTURER=$(adb -s $ID shell getprop ro.product.manufacturer | tr -cd '[[:alnum:]]._-')
      MODEL=$(adb -s $ID shell getprop ro.product.model | tr -cd '[[:alnum:]]._-')
      VERSION=$(adb -s $ID shell getprop ro.build.version.release | tr -cd '[[:alnum:]]._-')
      SDK=$(adb -s $ID shell getprop ro.build.version.sdk | tr -cd '[[:alnum:]]._-')
      INFO=$(printf "%s)\n%s\n%s\n%s\n(API %s)\n-\n%s" "$NUMBER" "$MANUFACTURER" "$MODEL" "$VERSION" "$SDK" "$ID")
      echo $INFO
      ((NUMBER++))
    done

    read -p "üìù Select a device: " CHOICE
    while :;
    do
    if ((CHOICE <= 0 || CHOICE > ${#DEVICES[@]})); then
      echo -en "\033[1A\033[2K" #deletes last echoed line in terminal
      read -p "Invalid input, try again: " CHOICE
    else
      break
    fi
    done
    SELECTED_DEVICE=${DEVICES[(($CHOICE-1))]}
else
  SELECTED_DEVICE="${DEVICES[0]}"
fi

SELECTED_DEVICE_MODEL=$(adb -s $SELECTED_DEVICE shell getprop ro.product.model | tr -cd '[[:alnum:]]._-')
SELECTED_DEVICE_SDK=$(adb -s $SELECTED_DEVICE shell getprop ro.build.version.sdk | tr -cd '[[:alnum:]]._-')
}

check_screen_on(){
  CURRENT_FOCUS=$(adb -s $1 shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)
  if [ "$CURRENT_FOCUS" == *"StatusBar"* ] || [ "$CURRENT_FOCUS" == *"mCurrentFocus=null"* ] || [ "$CURRENT_FOCUS" == *"Keyguard"* ]; then
    return 1
  else
    return 0
  fi
}

android_unlock_device(){
  if [[ $(check_screen_on $1) -eq 1  ]]; then
    echo "üõå Waking up the device..."
    adb -s $1 shell input keyevent KEYCODE_HOME
    if [[ $(check_screen_on $1) -eq 1  ]]; then
      adb -s $1 shell input keyevent KEYCODE_POWER
      if [[ $(check_screen_on $1) -eq 1  ]]; then
        adb -s $1 shell input keyevent 82
      fi
    fi
  fi
}

android_get_foreground_package(){
  adb -s $SELECTED_DEVICE shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev
}

android_is_package_installed() {
  adb -s $SELECTED_DEVICE shell pm list packages -f | sed -e 's/.*=//' | grep $1 &> /dev/null
  EXIT_CODE=$?
  if [ $EXIT_CODE -ne 0 ]; then
    echo "ü§∑‚Äç Package $1 is not installed."
    exit
  fi
}

##########################
### IOS SECTION

ios_wait_for_device(){
  echo "‚è≥ Waiting for iOS device..."
  while ! [ "$(idevice_id -l | wc -l)" -ge 1 ];
  do
    sleep 1
  done
  delete_lastline
}

ios_check_developer_image(){
  IS_MOUNTED=$(ideviceimagemounter -u $1 -l)
  if [ ${#IS_MOUNTED} -eq 0 ] ; then
    read -r -p "‚ùå Developer image probably not mounted, do you want to launch Xcode? [y/n] " RESPONSE
    case "$RESPONSE" in
        [yY])
            ;;
        *)
            exit
            ;;
    esac
    open -a Xcode
    sleep 8
  fi
}

ios_choose_device(){
  check_for_update
  IOS_DEVICES=( $(idevice_id -l) )

  #No device connected
  if [ ${#IOS_DEVICES[@]} -eq 0 ]
  then
     echo "‚ùå No device connected."
     yes_or_no "‚ùì Start simulator?"; if [[ "$RESPONSE" == "y" ||  "$RESPONSE" == "Y" ]]; then $TOOLKIT_LOCATION/isimulator start; exit; fi
     ios_wait_for_device
  fi

  if [ ${#IOS_DEVICES[@]} -gt 1 ]
  then
     NUMBER=1
     echo "üì± Available devices:"
     for ID in "${IOS_DEVICES[@]}"
      do
        ios_check_developer_image $ID
        MANUFACTURER="Apple"
        MODEL=$(ios_translate_name $(ideviceinfo -u $ID | grep "HardwareModel" | cut -d\   -f2))
        VERSION=$(ideviceinfo -u $ID | grep "ProductVersion" | cut -d\   -f2)
        INFO=$(printf "%s)\n%s\n%s\n%s\n-\n%s" "$NUMBER" "$MANUFACTURER" "$MODEL" "$VERSION" "$ID")
        echo $INFO
        ((NUMBER++))
      done

      read -p "üìù Select a device: " CHOICE
      while :;
      do
      if ((CHOICE <= 0 || CHOICE > ${#IOS_DEVICES[@]})); then
        echo -en "\033[1A\033[2K" #deletes last echoed line in terminal
        read -p "ü§∑ Invalid input, try again: " CHOICE
      else
        break
      fi
      done
      SELECTED_DEVICE=${IOS_DEVICES[(($CHOICE-1))]}
  else
     SELECTED_DEVICE="${IOS_DEVICES[0]}"
  fi

  SELECTED_DEVICE_MODEL=$(ios_translate_name $(ideviceinfo -u $SELECTED_DEVICE | grep "HardwareModel" | cut -d\   -f2))
  SELECTED_DEVICE_VERSION=$(ideviceinfo -u $SELECTED_DEVICE | grep "ProductVersion" | cut -d\   -f2)
}

ios_translate_name(){
  NAME=$1
  case $NAME in
    "Purple"*|"purple"*)
      NAME="iPhone"
      ;;
    "M68"*)
      NAME="iPhone"
      ;;
    "N90"*|"N92"*)
      NAME="iPhone4"
      ;;
    "N94"*)
      NAME="iPhone4S"
      ;;
    "N88"*)
      NAME="iPhone3GS"
      ;;
    "N82"*)
      NAME="iPhone3G"
      ;;
    "N71"*)
      NAME="iPhone6S"
      ;;
    "N66"*)
      NAME="iPhone6SPlus"
      ;;
    "N61"*)
      NAME="iPhone6"
      ;;
    "N56"*)
      NAME="iPhone6Plus"
      ;;
    "N51"*|"N53"*)
      NAME="iPhone5S"
      ;;
    "N48"*)
      NAME="iPhone5C"
      ;;
    "N41"*|"N42"*)
      NAME="iPhone5"
      ;;
    "D10"*)
      NAME="iPhone7"
      ;;
    "D11"*)
      NAME="iPhone7Plus"
      ;;
    "D20"*)
      NAME="iPhone8"
      ;;
    "D21"*)
      NAME="iPhone8Plus"
      ;;
    "D22"*|"Ferrari"*|"ferrari"*)
      NAME="iPhoneX"
      ;;
    "D32"*)
      NAME="iPhoneXS"
      ;;
    "D33"*)
      NAME="iPhoneXSMax"
      ;;
    "N84"*)
      NAME="iPhoneXR"
      ;;
    "J1"*)
      NAME="iPad3gen"
      ;;
    "J2"*)
      NAME="iPad3gen"
      ;;
    "J72"*)
      NAME="iPadAir"
      ;;
    "J82"*)
      NAME="iPadAir2"
      ;;
    "J85"*)
      NAME="iPadMiniRetina"
      ;;
    "J96"*)
      NAME="iPadMini4"
      ;;
    "J98"*|"J99"*)
      NAME="iPadPro"
      ;;
    "K48"*)
      NAME="iPad"
      ;;
    "K93"*|"K94"*|"K95"*)
      NAME="iPad2"
      ;;
    "P101"*|"P103"*)
      NAME="iPad4gen"
      ;;
    "P105"*|"P107"*)
      NAME="iPadMini"
      ;;
  esac
  echo $NAME
}

ios_get_package_list(){
  echo "üîç Detecting packages..."
  PACKAGE_LIST=()
  ALL_INFO_LIST=($(ideviceinstaller -u $SELECTED_DEVICE -l -o list_user | tail -n +2 | sed -e 's/.*=//' | sort))

  for PACKAGE in "${ALL_INFO_LIST[@]}" #remove redundant information
    do
      echo "$PACKAGE" | grep -q '"'
      EXIT_CODE=$?

      if [ $EXIT_CODE -ne 0 ]; then
        PACKAGE=${PACKAGE%,*}
        PACKAGE_LIST+=($PACKAGE)
      fi
    done

  if [ ${#PACKAGE_LIST[@]} -eq 0 ]; then
    echo "ü§∑‚Äç No packages installed."
    exit
  fi
}

#####
### COMMON SECTION

check_for_update(){
  TODAY=$(date +%Y-%m-%d)
  if [ -f "$LAST_CHECK_DATE_FILE" ]; then
    LAST_CHECK_DATE=$(cat $LAST_CHECK_DATE_FILE)
  else
    echo $TODAY > $LAST_CHECK_DATE_FILE
  fi

  CURRENT_DIR=$PWD
  cd $TOOLKIT_LOCATION
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

  if [[ "$CURRENT_BRANCH" == "master" && "$LAST_CHECK_DATE" != "$TODAY" ]]; then
    echo "üîÑ Checking for updates..."
    git status -uno | grep "up to date"
    if [ $? -ne 0 ]; then
      yes_or_no "üÜï Update available, download?";
      if [[ "$RESPONSE" == "y" ||  "$RESPONSE" == "Y" ]]; then
        echo "‚ôªÔ∏è Updating..."
        git pull &> /dev/null
        echo "‚úÖ Done."
      fi
    fi
  fi

  cd $CURRENT_DIR
}

delete_lastline(){
  echo -en "\033[1A\033[2K"
}

yes_or_no(){
  read -r -n 1 -p "$1 [y/n] " RESPONSE
  case "$RESPONSE" in
      [yY])
          ;;
      [nN])
          ;;
      *)
        echo
        echo "ü§∑‚Äç Invalid option."
        yes_or_no $1
        ;;
  esac
  echo
}

should_proceed(){
  read -r -n 1 -p "$1 [y/n] " RESPONSE
  case "$RESPONSE" in
    [yY])
      ;;
    *)
      exit
      ;;
  esac
  echo
}

choose_number(){
  MAX=$1
  read -p "üìù Choose number in range 1-$MAX: " CHOICE
  while :;
  do
    if [[ -z $CHOICE  || $CHOICE -le 0 || $CHOICE -gt $MAX ]]; then
      delete_lastline
      read -p "ü§∑‚Äç Invalid choice, try again: " CHOICE
    else
      break
    fi
  done
}

check_url(){
  URL=$1

  if [[ $URL == "" ]]; then
    read -p "üìù Insert web url: " URL
    check_url $URL
  else
    case $1 in
      'http://'*)
        ;;
      'https://'*)
        ;;
      *'://'*)
        ;;
      *)
        URL='http://'$URL
        ;;
    esac
  fi
}
